plugins {
	id 'fabric-loom' version '0.12-SNAPSHOT'
	id 'maven-publish'
}
apply from: "${rootProject.projectDir}/gradle/fabric.gradle"
apply from: "${rootProject.projectDir}/gradle/java.gradle"

archivesBaseName = project.archives_base_name
version = getVersion()
group = project.maven_group

repositories {
	maven {
		url = 'https://jitpack.io'
		content {
			includeGroup "com.github.Chocohead"
		}
	}
	maven {
		name = "Modrinth"
		url = "https://api.modrinth.com/maven"

		content {
			includeGroup "maven.modrinth"
		}
	}
}

loom {
	accessWidenerPath = file("src/main/resources/twm.accesswidener")
}

configurations {
	includeModImplementation
	includeImplementation

	include.extendsFrom includeImplementation
	include.extendsFrom includeModImplementation

	implementation.extendsFrom includeImplementation
	implementation.extendsFrom includeModImplementation
}

dependencies {
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

	// Fabric-ASM
	modImplementation "com.github.Chocohead:Fabric-ASM:${project.fabric_asm_version}"
	include "com.github.Chocohead:Fabric-ASM:${project.fabric_asm_version}"

	if (findProperty("twm.use_third_party_mods") != "false") {
		includeModImplementation "maven.modrinth:lazydfu:0.1.2"
	}
}

tasks.withType(JavaCompile) {
	options.encoding = "UTF-8"
	options.release.set(17)
}

tasks.withType(JavaCompile).configureEach {
	// Minecraft 1.18 (1.18-pre2) upwards uses Java 17.
	it.options.release = 17
	options.fork = true
	options.incremental = true
}

tasks.withType(Test).configureEach {
	maxParallelForks = Runtime.runtime.availableProcessors().intdiv(2) ?: 1
}

java {
	withSourcesJar()
}

jar {
	from "${rootProject.projectDir}/LICENSE.txt"
}

String getVersion() {
	String version = "${project.mod_version}+MC_${project.minecraft_version}"

	if (findProperty("releaseType") != "stable") {
		version += "-unstable"
	}

	return version
}

publishing {
	publications {
		mavenJava(MavenPublication) {
			// add all the jars that should be included when publishing to maven
			artifact(remapJar) {
				builtBy remapJar
			}
			artifact(sourcesJar) {
				builtBy remapSourcesJar
			}
		}
	}

	repositories {
		mavenCentral()
	}

	return version
}
